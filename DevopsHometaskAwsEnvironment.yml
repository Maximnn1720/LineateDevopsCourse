AWSTemplateFormatVersion: 2010-09-09
Description: Devops Hometask Aws Environment
Parameters:
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: String
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
#   Main space
  MainInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVPS
      InternetGatewayId: !Ref MainInternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MainVPS
  MainRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - MainInternetGateway
      - GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MainInternetGateway
  MainVPS:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.67.0/24
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
  FirstEipForNatGateway:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: vpc
  SecondEipForNatGateway:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: vpc
  FirstPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPS
  FirstPrivateRouteForAz1:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref FirstPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref FirstNatGateway
  SecondPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPS
  SecondPrivateRouteForAz2:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref SecondPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref SecondNatGateway
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref MainVPS
      GroupDescription: Security group from hometask for devops course
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: 0.0.0.0/0
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
#  MyListener:
#    Type: "AWS::ElasticLoadBalancingV2::Listener"
#    Properties:
#      DefaultActions:
#        - Type: "forward"
#          TargetGroupArn: !Ref MyTargetGroup
#      LoadBalancerArn: !Ref MainLoadBalancer
#      Port: 80
#      Protocol: "HTTP"
#  MyTargetGroup:
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#    Properties:
#      HealthCheckEnabled: true
#      HealthCheckProtocol: HTTP
#      HealthCheckPort: 80
#      HealthCheckPath: /
#      #      Matcher: 200
#      Protocol: HTTP
#      Port: 80
#      Name: MyTargets
#      TargetType: instance
#      VpcId: !Ref MainVPS
#      Targets:
#        - Id: !Ref FirstWebServer
#        - Id: !Ref SecondWebServer
#  MainLoadBalancer:
#    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#    Properties:
#      Scheme: internet-facing
#      SecurityGroups:
#        - !Ref WebServerSecurityGroup
#      Subnets:
#        - !Ref FirstPublicSubnet
#        - !Ref SecondPublicSubnet

#  First public subnet
  FirstPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MainVPS
      AvailabilityZone: eu-north-1a
      CidrBlock: 192.168.67.0/26
      MapPublicIpOnLaunch: true
  FirstNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt FirstEipForNatGateway.AllocationId
      SubnetId: !Ref FirstPublicSubnet
  FirstPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref FirstPublicSubnet
  FirstWebServer:
    Type: 'AWS::EC2::Instance'
    #    CreationPolicy:
    #      ResourceSignal:
    #        Timeout: PT15M
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - Install
            - ServiceStart
        Install:
          commands:
            01_command:
              command: |
                sudo yum update -y
            02_command:
              command: |
                sudo yum install aws-cfn-bootstrap -y
            03_command:
              command: |
                sudo amazon-linux-extras install nginx1 -y
        ServiceStart:
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: "t3.micro"
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - GroupSet:
            - Ref: WebServerSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref FirstPublicSubnet
      #      SecurityGroups:
      #        - !Ref WebServerSecurityGroup
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -x
            - |
              # Install the files and packages from the metadata
            - |
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource FirstWebServer '
            - '         --configsets InstallAndRun '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource FirstWebServer '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+  



#  Second public subnet
  SecondPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MainVPS
      AvailabilityZone: eu-north-1b
      CidrBlock: 192.168.67.64/26
      MapPublicIpOnLaunch: true
  SecondNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt SecondEipForNatGateway.AllocationId
      SubnetId: !Ref SecondPublicSubnet
  SecondPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SecondPublicSubnet
  SecondWebServer:
    Type: 'AWS::EC2::Instance'
#    CreationPolicy:
#      ResourceSignal:
#        Timeout: PT15M
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - Install
            - ServiceStart
        Install:
          commands:
            01_command:
              command: |
                sudo yum update -y
            02_command:
              command: |
                sudo yum install aws-cfn-bootstrap -y
            03_command:
              command: |
                sudo amazon-linux-extras install nginx1 -y
        ServiceStart:
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: "t3.micro"
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - GroupSet:
            - Ref: WebServerSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref SecondPublicSubnet
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -x
            - |
              # Install the files and packages from the metadata
            - |
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource SecondWebServer '
            - '         --configsets InstallAndRun '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource SecondWebServer '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

#  First private subnet
  FirstPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPS
      AvailabilityZone: eu-north-1a
      CidrBlock: 192.168.67.128/26
      MapPublicIpOnLaunch: false
  FirstPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FirstPrivateRouteTable
      SubnetId: !Ref FirstPrivateSubnet
#  Second private subnet
  SecondPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPS
      AvailabilityZone: eu-north-1b
      CidrBlock: 192.168.67.192/26
      MapPublicIpOnLaunch: false
  SecondPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SecondPrivateRouteTable
      SubnetId: !Ref SecondPrivateSubnet
Outputs:
  PublicIpFirstServer:
    Description: EC2 public IP
    Value: !GetAtt FirstWebServer.PublicIp
#  PublicIpSecondServer:
#    Description: EC2 public IP
#    Value: !GetAtt SecondWebServer.PublicIp